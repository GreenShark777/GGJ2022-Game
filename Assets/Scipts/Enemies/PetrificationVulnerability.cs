//Rende vulnerabile alla 
using UnityEngine;

public class PetrificationVulnerability : MonoBehaviour
{
    //array di riferimenti a tutti gli script da disabilitare per la pietrificazione
    [SerializeField]
    private MonoBehaviour[] scriptsToStop = default;
    //riferimento allo SpriteRenderer di quest'entità
    [SerializeField]
    private SpriteRenderer sr = default;
    //riferimento alla maschera di questo nemico, se ne ha una
    [SerializeField]
    private GameObject enemyMask = default;
    //riferimento alla stanza in cui ci si trova, a cui si deve dire che la maschera di questo nemico è stata tolta
    private RoomsBehaviour roomToInform;
    //riferimento allo sprite di pietrificazione
    [SerializeField]
    private Sprite petrifiedSprite = default;
    //indica se si è vulnerabili alla pietrificazione
    [SerializeField]
    private bool isVulnerable = false;
    //indica se questo nemico è già pietrificato o meno
    private bool isPetrified = false;


    /// <summary>
    /// Permette di impostare la stanza a cui indicare che questo nemico ha perso la maschera
    /// </summary>
    /// <param name="room"></param>
    public void SetRoom(RoomsBehaviour room) { roomToInform = room; }
    /// <summary>
    /// Pietrifica quest'entità se vulnerabile
    /// </summary>
    /// <returns></returns>
    public bool TryToPetrify()
    {
        //se vulnerabile e non già pietrificato...
        if (isVulnerable && !isPetrified)
        {
            //...comunica che questo nemico è stato pietrificato..
            isPetrified = true;
            //...disabilita ogni script nell'array...
            foreach (MonoBehaviour script in scriptsToStop) { script.enabled = false; }
            //...e cambia lo sprite con quello da pietrificato
            if (sr && petrifiedSprite) sr.sprite = petrifiedSprite;
            else { Debug.LogError("Impossibile cambiare sprite per pietrificazione a: " + name); }

            //Debug.LogError("Pietrificato: " + name);
        }
        //else { Debug.LogError("Non era vulnerabile, e non è stato pietrificato: " + name); }
        //infine, ritorna se il nemico è stato pietrificato o meno
        return isVulnerable;

    }
    /// <summary>
    /// Permette di cambiare lo stato di vulnerabilità alla pietrificazione
    /// </summary>
    /// <param name="state"></param>
    public void SetVulnerabilityState(bool state) { isVulnerable = state; }
    /// <summary>
    /// Rompe la maschera del nemico e informa la porta di controllo
    /// </summary>
    public void BreakMask()
    {
        //disattiva la maschera del nemico
        enemyMask.SetActive(false);
        //informa la porta di controllo che si è rotta la maschera di un nemico
        roomToInform.InformDoorOfMaskBreaking();
        //comunica che questo nemico adesso è vulnerabile alla pietrificazione
        SetVulnerabilityState(true);

    }

}
